<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shahzeb Ihsan</title>
    <description></description>
    <link>schaazzz.github.io/</link>
    <atom:link href="schaazzz.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 27 Jun 2015 02:05:15 +0800</pubDate>
    <lastBuildDate>Sat, 27 Jun 2015 02:05:15 +0800</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Configuring Your Arch Linux VM for Development</title>
        <description>&lt;p&gt;sudo ln -s /usr/bin/python2 /usr/bin/python
wget https://bootstrap.pypa.io/get-pip.py&lt;br /&gt;
sudo python /mnt/schaazzz/projects/sandbox.local/get-pip.py&lt;br /&gt;
sudo python -m pip install &lt;package&gt;  &lt;/package&gt;&lt;/p&gt;

&lt;p&gt;sudo pacman -S ruby
~/.bashrc
………+  PATH=”$(ruby -e ‘print Gem.user_dir’)/bin:$PATH)”
………+  export GEM_HOME=$(ruby -e ‘print Gem.user_dir’)
source ~/.bashrc&lt;/p&gt;

&lt;p&gt;note: /etc/environment is a better option: works with ssh as well&lt;/p&gt;

&lt;p&gt;… for SSH:
sudo pacman -S openssh
nano /etc/ssh/sshd_config =&amp;gt; enable “AddressFamily any”
sudo systemctl enable sshd.service&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Jun 2015 00:00:00 +0800</pubDate>
        <link>schaazzz.github.io/configuring-archlinux-vm-dev-env</link>
        <guid isPermaLink="true">schaazzz.github.io/configuring-archlinux-vm-dev-env</guid>
        
        <category>virtualbox,</category>
        
        <category>virtualmachine,</category>
        
        <category>archlinux,</category>
        
        <category>linux,</category>
        
        <category>development,</category>
        
        <category>python,</category>
        
        <category>ruby,</category>
        
        <category>ssh</category>
        
        
      </item>
    
      <item>
        <title>Installing Arch Linux on VirtualBox</title>
        <description>&lt;p&gt;Arch Linux has to be installed manually since the official &lt;a href=&quot;https://www.archlinux.org/download/&quot;&gt;Arch Linux ISO&lt;/a&gt; doesn’t contain an installer, additionally, no packages are included in the ISO, so a working internet connection is required during installation. &lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Most of the information below can be found in the &lt;a href=&quot;https://wiki.archlinux.org/index.php/Installation_guide&quot;&gt;official installation guide&lt;/a&gt; but some other information requires some Googling and a little bit of digging around on the Arch Linux wiki.&lt;/p&gt;

&lt;h2 id=&quot;virtual-machine-configuration&quot;&gt;Virtual Machine Configuration&lt;/h2&gt;

&lt;p&gt;Create a new virtual machine in VirtualBox for Arch Linux (sample configuration shown below). Once the VM is created add the Arch Linux ISO to the CD/DVD drive.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/vm_config.png&quot; alt=&quot;Virtual Machine Configuration&quot; class=&quot;center-image&quot; /&gt;  &lt;/p&gt;

&lt;p&gt;Configuration of the highlighted settings in the screenshot below are important and the rest are optional. Arch Linux can run on a pretty low memory configuration so you can set the size of the display and base memories according to your preferences.  &lt;/p&gt;

&lt;p&gt;For storage, I configured a “dynamically allocated” 8.0 GB hard drive image since I wanted to upload the resulting VMs to Dropbox, but I would recommend using a “fixed size” hard drive if you have space to spare on your host machine.  &lt;/p&gt;

&lt;p&gt;The network settings are important for installation of Arch Linux. At a minimum, you need to bridge your host machine’s network interface (which is connected to the internet) with your VM as show in the following image:  &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/images/vm_config_network.png&quot; alt=&quot;Virtual Machine Configuration - Network&quot; class=&quot;center-image&quot; /&gt;  &lt;/p&gt;

&lt;p&gt;In case you would like any folders from your host machine to be accessible in your VM, the simplest way is to add them to the “Machine Folders” section under “Shared Folders” but do not selec the “Auto-mount” option otherwise they will only be accessible as root.&lt;/p&gt;

&lt;h2 id=&quot;installing-arch-linux&quot;&gt;Installing Arch Linux&lt;/h2&gt;

&lt;p&gt;Now that the VM has been created with the ISO already &lt;em&gt;inserted&lt;/em&gt;, start the virtual machine and login with user ID and password “root”.&lt;/p&gt;

&lt;custom0&gt;Partitioning the VM&#39;s Hard Drive&lt;/custom0&gt;
&lt;p&gt;You can &lt;a href=&quot;https://wiki.archlinux.org/index.php/Partitioning&quot;&gt;partition the hard drive&lt;/a&gt; using either a &lt;a href=&quot;https://wiki.archlinux.org/index.php/Partitioning#Single_root_partition&quot;&gt;single root partition&lt;/a&gt; or &lt;a href=&quot;https://wiki.archlinux.org/index.php/Partitioning#Discrete_partitions&quot;&gt;discrete partitions&lt;/a&gt;. I’ve chosen a mixture of the 2 partitioning schemes, 200MB as /boot for installing GRUB, 1024MB swap file and the rest allocated as a single root partition.  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Lets use the &lt;code&gt;lsblk&lt;/code&gt; command to take a look at all the available storage devices:&lt;br /&gt;
&lt;img src=&quot;/public/images/lsblk_output.jpg&quot; alt=&quot;&#39;lsblk&#39;&quot; class=&quot;center-image&quot; /&gt;  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;As you can seen in the example above, in my case, “sda” was the VM’s hard drive image. We can find out a bit more about “sda” using &lt;code&gt;parted  /dev/sda  print&lt;/code&gt;:&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;/public/images/parted_print_output.jpg&quot; alt=&quot;&#39;lsblk&#39;&quot; class=&quot;center-image&quot; /&gt;  &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The following set of command will create the desired partitions:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
parted /dev/sda  
(parted) mklabel msdos  
(parted) mkpart primary ext4 1MiB 200MiB  
(parted) set 1 boot on  
(parted) mkpart primary linux-swap 210MiB 1177MiB  
(parted)  mkpart primary ext4 1024MiB 100%  
&lt;/pre&gt;
&lt;p&gt;… mkfs.ext4 /dev/sda1&lt;br /&gt;
… mkfs.ext4 /dev/sda3&lt;br /&gt;
… Activate swap&lt;br /&gt;
…… mkswap /dev/sda2&lt;br /&gt;
…… swapon /dev/sda2&lt;br /&gt;
… mount /dev/sda3 /mnt&lt;br /&gt;
… mkdir -p /mnt/boot&lt;br /&gt;
… mount /dev/sda1 /mnt/boot&lt;br /&gt;
… Install the base system&lt;br /&gt;
…… pacstrap -i /mnt base base-devel&lt;br /&gt;
… genfstab -U -p /mnt » /mnt/etc/fstab  &lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;chroot into your newly installed base system&lt;/strong&gt;&lt;br /&gt;
…… arch-chroot /mnt /bin/bash&lt;br /&gt;
… passwd&lt;br /&gt;
… pacman -S grub os-prober&lt;br /&gt;
… grub-install –recheck /dev/sda&lt;br /&gt;
… grub-mkconfig -o /boot/grub/grub.cfg&lt;br /&gt;
… exit&lt;br /&gt;
… umount -R /mnt&lt;br /&gt;
… reboot  &lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Network Configuration&lt;/strong&gt;&lt;br /&gt;
… nano /etc/systemd/enp0s3.network&lt;br /&gt;
… nano /etc/systemd/enp0s8.network&lt;br /&gt;
… nano /etc/resolv.conf&lt;br /&gt;
… systemctl enable dhcpcd@enp0s3.service&lt;br /&gt;
… systemctl enable dhcpcd@enp0s8.service&lt;br /&gt;
… systemctl restart systemd-networkd&lt;br /&gt;
… systemctl status systemd-networkd&lt;br /&gt;
… networkctl&lt;br /&gt;
… pacman -Syu&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Installing VirtualBox Guest Addition&lt;/strong&gt;&lt;br /&gt;
… pacman -S virtualbox-guest-modules virtualbox-guest-utils&lt;br /&gt;
… modprobe -a vboxguest vboxsf vboxvideo  &lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Installing LXQT&lt;/strong&gt;&lt;br /&gt;
… pacman -S lxqt&lt;br /&gt;
… pacman -S openbox&lt;br /&gt;
… pacman -S sddm  &lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;————-&amp;gt; ???&lt;br /&gt;
pacman -S lxqt openbox obconf xf86-video-fbdev xorg-server xorg-server-utils xorg-xinit mesa xf86-input-keyboard xf86-input-mouse xterm ttf-dejavu libxkbcommon libxkbcommon-x11
Then nano .xinitrc and type “exec startlxqt” save
startx and it’s working.&lt;br /&gt;
&amp;lt;————-  &lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;… nano /etc/X11/xinit/xinitrc ==&amp;gt; add “exec startlxqt”&lt;br /&gt;
… cp /etc/X11/xinit/xinitrc ~/.xinitrc&lt;br /&gt;
… sddm –example-config &amp;gt; /etc/sddm.conf&lt;br /&gt;
… systemctl enable sddm.service  &lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Installing XFCE&lt;/strong&gt;&lt;br /&gt;
… pacman -S xfce4 xorg lxdm&lt;br /&gt;
… systemctl enable lxdm.service  &lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Add user&lt;/strong&gt;&lt;br /&gt;
adduser &lt;username&gt;  
passwd &lt;username&gt;  
visudo --&amp;gt; search for &quot;# User privilege specification&quot; and add &quot;&lt;username&gt; ALL = (ALL) ALL&quot;  &lt;/username&gt;&lt;/username&gt;&lt;/username&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Jun 2015 00:00:00 +0800</pubDate>
        <link>schaazzz.github.io/installing-arch-on-vbox</link>
        <guid isPermaLink="true">schaazzz.github.io/installing-arch-on-vbox</guid>
        
        <category>virtualbox</category>
        
        <category>virtualmachine</category>
        
        <category>archlinux</category>
        
        <category>linux</category>
        
        <category>development</category>
        
        
      </item>
    
      <item>
        <title>First Post - Blog &amp; Site Finally Ready</title>
        <description>&lt;p&gt;I finally have a shiny new Jekyll based Github blog. &lt;!--more--&gt;&lt;img class=&quot;emoji&quot; title=&quot;:smile:&quot; alt=&quot;:smile:&quot; src=&quot;https://assets.github.com/images/icons/emoji/unicode/1f604.png&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The theme I’m using is &lt;a href=&quot;http://railsr.github.io/introducing-autm-rb/&quot;&gt;Autm-rb&lt;/a&gt; and the image slider on the &lt;a href=&quot;http://schaazzz.github.io&quot;&gt;homepage&lt;/a&gt; is &lt;a href=&quot;http://www.jssor.com/&quot;&gt;JSSOR&lt;/a&gt;. I’m using images directly from a &lt;a href=&quot;https://www.flickr.com/photos/schaazzz/sets/72157622960195643&quot;&gt;Flickr set&lt;/a&gt; which &lt;em&gt;I&lt;/em&gt; think contains the best pictures I’ve taken so far. Since the set in question contains quite a few pictures, manually retrieving the URLs for thumbnails and images would’ve been a tad tedious, so I wrote a script using &lt;a href=&quot;http://stuvel.eu/media/flickrapi-docs/documentation/&quot;&gt;this Flickr API&lt;/a&gt; to do this, you can find this script &lt;a href=&quot;https://github.com/schaazzz/script_magic/blob/master/get_photo_urls_from_flickr_set.py&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ll cover how I integrated JSSOR into Jekyll/Autm-rb in another blog post.&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Jun 2015 00:00:00 +0800</pubDate>
        <link>schaazzz.github.io/first-post-site-ready</link>
        <guid isPermaLink="true">schaazzz.github.io/first-post-site-ready</guid>
        
        <category>general</category>
        
        
      </item>
    
  </channel>
</rss>
